High priority:
-- ASP.NET Web app:
  ?? Kinda sorta in-progress
  ?? Format list items (Alert, Sortie, Invasion, etc.) as tables where necessary (in progress, should look up CSS/general web design stuff to make them prettier)
  -- Add Void Traders, Darvo Deals, PVP Challenges, Invasion event status
  -- Add error checks to make sure the entire page doesn't crash if one of the lists/list items breaks
  -- Read up on AJAX UpdatePanel, Timer, and ScriptManager for dynamically updating stuff (Design view of .aspx -> Toolbox)
    -- Looks like I'll probably need to use JS for dynamically adding new things as they come up in the worldState
  -- Maybe use MVC instead of just a blank ASP.NET project (nahhh...)
  -- Add lock of some sort to wsdata in Global.asax to make access thread safe
  -- Get rid of contact page maybe

-- Keep an eye on the worldstate php, new object called "ConstructionProjects"

-- Might as well make a mapper for all the .json things in data folder

-- https://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.aspx for updating mappers when a JSON file gets changed?
  -- Need to find a better way to manage the JSON files before trying this

?? (Ongoing) Check PVP Challenges for consistency of numbers and add new types

Low priority:
-- Maybe for default class constructors, fill the item with default values?

-- Maybe rethink properties and private m_- variables. Could replace them with a { get; private set; } property maybe?
  ?? Might as well keep it consistent for now

-- Re-learn delegates and events and stuff and allow the button press to refresh the worldState in both windows

-- Maybe think about refactoring the object lists to HashMap or something that can both ignore duplicates upon WorldState refresh, add new things when relevant, and remove old/expired things
  -- Would also make things easier for notifications

-- Notifications too, maybe

-- Refactor mappers to be a single class, maybe

Done:
xx Add Stalkerlyte data structure
xx Figure out how to populate the form on comboBox1 changes (to actually get data into a visible state)
xx Invasion count/goal in ToString() needs % complete formatting
xx Grab aliasfalse's Warframe data (SolNode matcher and whatnot) to map stuff to readable stuff (stole some other JSON stuff too)
xx add ToString() method for all classes maybe? just so I can get the data structures printed out and check for bugs/missing stuff
 xx IN PROGRESS todo: complete formatting and implement toString() for all classes that inherit WorldStateObject
xx actually add crap to the UI
xx Hook UI things up to data changes
xx Surround mapper initializers with try/catches (see MapResource.cs) to fix [alerts, Alerts] bug (still don't know why JSON breaking caused the ComboBox datasource to break too ¯\_(ツ)_/¯)
xx Set up a timing system to auto-refresh the WorldState every <arbitrary amount of time>
xx Figure out how how to deal with capital letters in the JSON files (may need to convert pathnames in the JSON files to lowercase and convert pathnames in the item classes to lower as well :/)
  xx Change all pathnames to lower-case but leave the item names capitalized
xx Added functionality to grab PS4/XB1 worldStates for basically no reason
xx Split up Parser and UI into different projects
xx Figure out how to resolve the issue of the JSON files not being brought along with code
  xx Done, fix is at the very bottom of WarframeWorldStateWeb.csproj
  xx Works on a local level at least
xx convert m_messages in Event.cs to a Dictionary maybe
xx Modify getters for Alert/Invasion/etc. properties to map things such as SolNodes/missionTypes/etc. where applicable
  xx maybe for things I map have r_<var> for the raw data and <var> for prettified data?
  xx for Invasion Tuples, maybe make a new Tuple<string, int> with the mapped name as the string component?
xx Add tag and description for Gift of the Lotus and Design Council Challenge alerts
xx Add an option to read WorldState from a file, for testing purposes
  xx Also added an option to disable auto-updating every minute for Desktop app
xx Move some of the code from Default.aspx.cs to application level

In limbo:
?? (see MapResource.cs) merge languages.json and resourcesData.json and get rid of the jobj2 workaround
  not sure if necessary, plus I'll replace my languages.json when there's an update


Note to self: Delete %LocalAppData%\Apps\2.0 to fix ClickOnce being screwy